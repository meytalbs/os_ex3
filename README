-------------------------------------------------------------------------------
Written by: Meytal Abrahamian & Tomer Akrish 
-------------------------------------------------------------------------------

Program file: ex1ba1.c
===============================================================================
This program receives using the argument vector a natural number.

The program repeats the following task 50 times:
first will randomize an array of with the size of 50,0000
it cerates two children:
    Child A will sort the array using bubbles sort.
    Child B will sort the array using quick sort.

Each child sends information to their dad:
A. Which sort was preformd: b or q
B. How long did it take to sort the array.
the dad will read the time it took to sort and and it to the right struct
during the sort it will save the fastest and slowest time.

Input: (in argument vector) number_to_srand
Output: 7 informations: 
   1. How long on average did it take to bubbles sort the data, 
   2. How long did it take to quick sort.
   3. Fastest time a child has run a bubble sort 
   4. Fastest time a child has run a quick sort.
   5. Slowest time a child who has sorted using bubble sort.
   6. Slowest time a child who has sorted using quick sort.
   7. program run time.

in prog 1a the program took 440.394273 seconds in average to complete the job
in this program the average run time is 429.687101

compile: gcc -Wall ex3a.c -o ex3a
run: ./ex1ba1 factor(int)


Program file: ex3b.c
===============================================================================
This program fill array of integers in prime numbers.
to do that, it create NUM_OF_CHILDREN (3) that each one of them connect to main
prosses with pipe. general pipe for all prosses and uniq pipe for each one of
the child prosses with the father.
each child in infinite loop gets random integer, check if it prime and if it is
sent the integer to its father.
the father get the integers from the child, count appearance of this integer in
the array and return the result to child.
when the array is full, the father send to its children to end.
when the children get the msg that they need to end, they print how many new 
prime each one of them gave to father and end their prosses.
after all children finished, the father also print how many diffrent prime he
have in the array and end.

Input: no input
Output: 4 informations:
        Sum of diffrent value in child CHILD_PID THE_SUM 
        Sum of diffrent value in child CHILD_PID THE_SUM 
        Sum of diffrent value in child CHILD_PID THE_SUM 
        Sum of diffrent value in array: THE_SUM_IN_ARRAY

in this program we define NUM_OF_CHILDREN = 3 but they can be more them 3.
therefor the output is depends on sum of children: for each one the program 
print line as above and at the end, one line for the father

compile: gcc -Wall ex3b.c -o ex3b
run: ./ex3b
